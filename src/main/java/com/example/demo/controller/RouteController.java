package com.example.demo.controller;

import com.example.demo.config.ResourceNotFoundException;
import com.example.demo.model.Bus;
import com.example.demo.model.Route;
import com.example.demo.service.BusService;
import com.example.demo.service.RouteService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import jakarta.validation.Valid;

import java.util.List;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;

/**
 * –ö–û–ù–¢–†–û–õ–õ–ï–† –î–õ–Ø –†–ê–ë–û–¢–´ –° –ú–ê–†–®–†–£–¢–ê–ú–ò –ò –ê–í–¢–û–ë–£–°–ê–ú–ò
 */
@RestController
@RequestMapping("/api")
@Tag(name = "üõ£Ô∏è –ú–∞—Ä—à—Ä—É—Ç—ã –∏ –∞–≤—Ç–æ–±—É—Å—ã", description = "API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞–º–∏ –∏ –∞–≤—Ç–æ–±—É—Å–∞–º–∏")
public class RouteController {
    
    private final RouteService routeService;
    private final BusService busService;

    public RouteController(RouteService routeService, BusService busService) {
        this.routeService = routeService;
        this.busService = busService;
    }

    /**
     * –ü–û–õ–£–ß–ï–ù–ò–ï –í–°–ï–• –ú–ê–†–®–†–£–¢–û–í
     */
    @Operation(summary = "–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã")
    @GetMapping("/routes")
    public ResponseEntity<List<Route>> getAllRoutes() {
        try {
            List<Route> routes = routeService.getAll();
            return ResponseEntity.ok(routes);
        } catch (Exception e) {
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤: " + e.getMessage());
        }
    }

    /**
     * –ü–û–õ–£–ß–ï–ù–ò–ï –ú–ê–†–®–†–£–¢–ê –ü–û ID
     */
    @Operation(summary = "–ü–æ–ª—É—á–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –ø–æ ID")
    @GetMapping("/routes/{id}")
    public ResponseEntity<Route> getRouteById(
            @Parameter(description = "ID –º–∞—Ä—à—Ä—É—Ç–∞", required = true)
            @PathVariable Long id) {
        
        Route route = routeService.getById(id);
        if (route == null) {
            throw new ResourceNotFoundException("–ú–∞—Ä—à—Ä—É—Ç", id);
        }
        return ResponseEntity.ok(route);
    }

    /**
     * –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–ì–û –ú–ê–†–®–†–£–¢–ê
     */
    @Operation(summary = "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç")
    @PostMapping("/routes")
    public ResponseEntity<Route> addRoute(
            @Parameter(description = "–î–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–∞", required = true)
            @RequestBody @Valid Route route) {
        
        try {
            Route created = routeService.create(route);
            return ResponseEntity.ok(created);
        } catch (Exception e) {
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞: " + e.getMessage());
        }
    }

    /**
     * –ü–û–õ–£–ß–ï–ù–ò–ï –ê–í–¢–û–ë–£–°–û–í –ü–û –ú–ê–†–®–†–£–¢–£
     */
    @Operation(summary = "–ü–æ–ª—É—á–∏—Ç—å –∞–≤—Ç–æ–±—É—Å—ã –ø–æ –º–∞—Ä—à—Ä—É—Ç—É")
    @GetMapping("/routes/{routeId}/buses")
    public ResponseEntity<List<Bus>> getBusesByRoute(
            @Parameter(description = "ID –º–∞—Ä—à—Ä—É—Ç–∞", required = true)
            @PathVariable Long routeId) {
        
        try {
            List<Bus> buses = busService.getByRouteId(routeId);
            
            if (buses.isEmpty()) {
                throw new ResourceNotFoundException("–ê–≤—Ç–æ–±—É—Å—ã –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞", routeId);
            }
            
            return ResponseEntity.ok(buses);
            
        } catch (ResourceNotFoundException e) {
            throw e;
        } catch (Exception e) {
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–±—É—Å–æ–≤: " + e.getMessage());
        }
    }

    /**
     * –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–ì–û –ê–í–¢–û–ë–£–°–ê
     */
    @Operation(summary = "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–≤—Ç–æ–±—É—Å")
    @PostMapping("/buses")
    public ResponseEntity<Bus> addBus(
            @Parameter(description = "–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–±—É—Å–∞", required = true)
            @RequestBody @Valid Bus bus) {
        
        try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
            if (bus.getModel() == null || bus.getModel().trim().isEmpty()) {
                throw new IllegalArgumentException("–ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–±—É—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π");
            }
            
            Bus created = busService.create(bus);
            return ResponseEntity.ok(created);
            
        } catch (IllegalArgumentException e) {
            throw new IllegalArgumentException("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–±—É—Å–∞: " + e.getMessage());
        } catch (Exception e) {
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≤—Ç–æ–±—É—Å–∞: " + e.getMessage());
        }
    }

    /**
     * –ü–û–õ–£–ß–ï–ù–ò–ï –ê–í–¢–û–ë–£–°–ê –ü–û ID
     */
    @Operation(summary = "–ü–æ–ª—É—á–∏—Ç—å –∞–≤—Ç–æ–±—É—Å –ø–æ ID")
    @GetMapping("/buses/{id}")
    public ResponseEntity<Bus> getBusById(
            @Parameter(description = "ID –∞–≤—Ç–æ–±—É—Å–∞", required = true)
            @PathVariable Long id) {
        
        Bus bus = busService.getById(id);
        if (bus == null) {
            throw new ResourceNotFoundException("–ê–≤—Ç–æ–±—É—Å", id);
        }
        return ResponseEntity.ok(bus);
    }
}