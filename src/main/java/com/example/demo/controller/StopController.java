package com.example.demo.controller;

import com.example.demo.config.ResourceNotFoundException;
import com.example.demo.model.Stop;
import com.example.demo.service.StopService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import jakarta.validation.Valid;

import java.util.List;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;

/**
 * –ö–û–ù–¢–†–û–õ–õ–ï–† –î–õ–Ø –†–ê–ë–û–¢–´ –° –û–°–¢–ê–ù–û–í–ö–ê–ú–ò
 */
@RestController
@RequestMapping("/api/stops")
@Tag(name = "üìç –û—Å—Ç–∞–Ω–æ–≤–∫–∏", description = "API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞–º–∏ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
public class StopController {
    
    private final StopService stopService;

    public StopController(StopService stopService) {
        this.stopService = stopService;
    }

    /**
     * –ü–û–õ–£–ß–ï–ù–ò–ï –í–°–ï–• –û–°–¢–ê–ù–û–í–û–ö
     */
    @Operation(summary = "–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    @GetMapping
    public ResponseEntity<List<Stop>> getAllStops() {
        try {
            List<Stop> stops = stopService.getAll();
            return ResponseEntity.ok(stops);
        } catch (Exception e) {
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫: " + e.getMessage());
        }
    }

    /**
     * –ü–û–ò–°–ö –ë–õ–ò–ñ–ê–ô–®–ò–• –û–°–¢–ê–ù–û–í–û–ö –ü–û –ö–û–û–†–î–ò–ù–ê–¢–ê–ú
     */
    @Operation(summary = "–ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    @GetMapping("/nearby")
    public ResponseEntity<List<Stop>> getNearbyStops(
            @Parameter(description = "–®–∏—Ä–æ—Ç–∞", example = "55.7558", required = true)
            @RequestParam Double lat,
            
            @Parameter(description = "–î–æ–ª–≥–æ—Ç–∞", example = "37.6173", required = true)
            @RequestParam Double lon) {
        
        try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            if (lat == null || lon == null) {
                throw new IllegalArgumentException("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏");
            }
            
            if (lat < -90 || lat > 90) {
                throw new IllegalArgumentException("–®–∏—Ä–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç -90 –¥–æ 90");
            }
            
            if (lon < -180 || lon > 180) {
                throw new IllegalArgumentException("–î–æ–ª–≥–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç -180 –¥–æ 180");
            }
            
            List<Stop> stops = stopService.getNearbyStops(lat, lon);
            return ResponseEntity.ok(stops);
            
        } catch (IllegalArgumentException e) {
            throw new IllegalArgumentException("–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: " + e.getMessage());
        } catch (Exception e) {
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –±–ª–∏–∂–∞–π—à–∏—Ö –æ—Å—Ç–∞–Ω–æ–≤–æ–∫: " + e.getMessage());
        }
    }

    /**
     * –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–ô –û–°–¢–ê–ù–û–í–ö–ò
     */
    @Operation(summary = "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É")
    @PostMapping
    public ResponseEntity<Stop> addStop(
            @Parameter(description = "–î–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏", required = true)
            @RequestBody @Valid Stop stop) {
        
        try {
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –±–∏–∑–Ω–µ—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è
            if (stop.getLat() < -90 || stop.getLat() > 90) {
                throw new IllegalArgumentException("–®–∏—Ä–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç -90 –¥–æ 90");
            }
            
            if (stop.getLon() < -180 || stop.getLon() > 180) {
                throw new IllegalArgumentException("–î–æ–ª–≥–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç -180 –¥–æ 180");
            }
            
            Stop created = stopService.create(stop);
            return ResponseEntity.ok(created);
            
        } catch (IllegalArgumentException e) {
            throw new IllegalArgumentException("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: " + e.getMessage());
        } catch (Exception e) {
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: " + e.getMessage());
        }
    }

    /**
     * –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ö–û–ù–ö–†–ï–¢–ù–û–ô –û–°–¢–ê–ù–û–í–ö–ï
     */
    @Operation(summary = "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ ID")
    @GetMapping("/{id}")
    public ResponseEntity<Stop> getStopById(
            @Parameter(description = "ID –æ—Å—Ç–∞–Ω–æ–≤–∫–∏", required = true)
            @PathVariable Long id) {
        
        Stop stop = stopService.getById(id);
        if (stop == null) {
            throw new ResourceNotFoundException("–û—Å—Ç–∞–Ω–æ–≤–∫–∞", id);
        }
        return ResponseEntity.ok(stop);
    }

    /**
     * –û–ë–ù–û–í–õ–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –û–ë –û–°–¢–ê–ù–û–í–ö–ï
     */
    @Operation(summary = "–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ")
    @PutMapping("/{id}")
    public ResponseEntity<Stop> updateStop(
            @Parameter(description = "ID –æ—Å—Ç–∞–Ω–æ–≤–∫–∏", required = true)
            @PathVariable Long id,
            
            @Parameter(description = "–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", required = true)
            @RequestBody @Valid Stop updatedStop) {
        
        Stop existing = stopService.getById(id);
        if (existing == null) {
            throw new ResourceNotFoundException("–û—Å—Ç–∞–Ω–æ–≤–∫–∞", id);
        }
        
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è
            existing.setName(updatedStop.getName());
            existing.setLat(updatedStop.getLat());
            existing.setLon(updatedStop.getLon());
            
            Stop saved = stopService.create(existing); // –ò—Å–ø–æ–ª—å–∑—É–µ–º create –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            return ResponseEntity.ok(saved);
            
        } catch (Exception e) {
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: " + e.getMessage());
        }
    }

    /**
     * –£–î–ê–õ–ï–ù–ò–ï –û–°–¢–ê–ù–û–í–ö–ò
     */
    @Operation(summary = "–£–¥–∞–ª–∏—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫—É")
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteStop(
            @Parameter(description = "ID –æ—Å—Ç–∞–Ω–æ–≤–∫–∏", required = true)
            @PathVariable Long id) {
        
        Stop existing = stopService.getById(id);
        if (existing == null) {
            throw new ResourceNotFoundException("–û—Å—Ç–∞–Ω–æ–≤–∫–∞", id);
        }
        
        try {
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            // –ù–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞—Ö
            
            // stopService.deleteById(id); // –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
            throw new UnsupportedOperationException("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ");
            
        } catch (UnsupportedOperationException e) {
            throw e;
        } catch (Exception e) {
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: " + e.getMessage());
        }
    }
}