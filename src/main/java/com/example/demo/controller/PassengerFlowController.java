package com.example.demo.controller;

import com.example.demo.exception.ResourceNotFoundException;
import com.example.demo.dto.PassengerCountDTO;
import com.example.demo.dto.RoutePredictionDTO;
import com.example.demo.model.PassengerCount;
import com.example.demo.service.PassengerCountService;
import com.example.demo.service.PredictionService;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import jakarta.validation.Valid;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;

/**
 * –ö–û–ù–¢–†–û–õ–õ–ï–† –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–ê–°–°–ê–ñ–ò–†–û–ü–û–¢–û–ö–û–ú –ò –ü–†–û–ì–ù–û–ó–ê–ú–ò
 */
@RestController
@RequestMapping("/api")
@Tag(name = "üìä –ü–∞—Å—Å–∞–∂–∏—Ä–æ–ø–æ—Ç–æ–∫ –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã", description = "API –¥–ª—è —É—á–µ—Ç–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏")
public class PassengerFlowController {
    
    private final PassengerCountService passengerCountService;
    private final PredictionService predictionService;

    public PassengerFlowController(PassengerCountService passengerCountService, 
                                PredictionService predictionService) {
        this.passengerCountService = passengerCountService;
        this.predictionService = predictionService;
    }

/**
 * –ü–û–õ–£–ß–ï–ù–ò–ï –í–°–ï–• –ó–ê–ü–ò–°–ï–ô –û –ü–ê–°–°–ê–ñ–ò–†–ê–•
 */
@Operation(summary = "–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–ø–æ—Ç–æ–∫–µ")
@GetMapping("/passengers")
public ResponseEntity<List<PassengerCount>> getAllPassengerCounts() {
    try {
        List<PassengerCount> passengers = passengerCountService.getAll();
        return ResponseEntity.ok(passengers);
    } catch (Exception e) {
        throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞—Ö: " + e.getMessage());
    }
}


    /**
     * –ü–û–õ–£–ß–ï–ù–ò–ï –ó–ê–ü–ò–°–ò –û –ü–ê–°–°–ê–ñ–ò–†–ê–• –ü–û ID
     */
    @Operation(summary = "–ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å—å –æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞—Ö –ø–æ ID")
    @GetMapping("/passengers/{id}")
    public ResponseEntity<PassengerCount> getPassengerCountById(
            @Parameter(description = "ID –∑–∞–ø–∏—Å–∏ –æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞—Ö", required = true)
            @PathVariable Long id) {
        
        PassengerCount passengerCount = passengerCountService.getById(id);
        if (passengerCount == null) {
            throw new ResourceNotFoundException("–ó–∞–ø–∏—Å—å –æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞—Ö", id);
        }
        return ResponseEntity.ok(passengerCount);
    }

    /**
     * –î–û–ë–ê–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• –° –î–ê–¢–ß–ò–ö–ê –£–ß–ï–¢–ê –ü–ê–°–°–ê–ñ–ò–†–û–í
     */
    @Operation(summary = "–î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –¥–∞—Ç—á–∏–∫–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–ø–æ—Ç–æ–∫–∞")
    @ApiResponses({
        @ApiResponse(responseCode = "201", description = "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"),
        @ApiResponse(responseCode = "400", description = "–ù–µ–≤–µ—Ä–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    })
    @PostMapping("/passengers")
    public ResponseEntity<PassengerCount> addPassengerCount(
            @Parameter(description = "–î–∞–Ω–Ω—ã–µ –æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞—Ö", required = true)
            @RequestBody @Valid PassengerCount passengerCount) {
        
        try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏: —Å—É–º–º–∞ –≤–æ—à–µ–¥—à–∏—Ö –∏ –≤—ã—à–µ–¥—à–∏—Ö –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏—á–Ω–æ–π
            if (passengerCount.getEntered() < 0 || passengerCount.getExited() < 0) {
                throw new IllegalArgumentException("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º");
            }
            
            if (passengerCount.getEntered() > 100 || passengerCount.getExited() > 100) {
                throw new IllegalArgumentException("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –∑–∞ –æ–¥–Ω—É –∑–∞–ø–∏—Å—å");
            }
            
            PassengerCount created = passengerCountService.create(passengerCount);
            return ResponseEntity.status(HttpStatus.CREATED).body(created);
            
        } catch (IllegalArgumentException e) {
            throw new IllegalArgumentException("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: " + e.getMessage());
        } catch (Exception e) {
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞—Ö: " + e.getMessage());
        }
    }

    /**
     * –û–ë–ù–û–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• –û –ü–ê–°–°–ê–ñ–ò–†–ê–•
     */
    @Operation(summary = "–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞—Ö")
    @PutMapping("/passengers/{id}")
    public ResponseEntity<PassengerCount> updatePassengerCount(
            @Parameter(description = "ID –∑–∞–ø–∏—Å–∏", required = true)
            @PathVariable Long id,
            
            @Parameter(description = "–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", required = true)
            @RequestBody @Valid PassengerCount updatedPassengerCount) {
        
        PassengerCount existing = passengerCountService.getById(id);
        if (existing == null) {
            throw new ResourceNotFoundException("–ó–∞–ø–∏—Å—å –æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞—Ö", id);
        }
        
        try {
            PassengerCount updated = passengerCountService.updateById(id, updatedPassengerCount);
            return ResponseEntity.ok(updated);
        } catch (Exception e) {
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: " + e.getMessage());
        }
    }

    /**
     * –£–î–ê–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• –û –ü–ê–°–°–ê–ñ–ò–†–ê–•
     */
    @Operation(summary = "–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞—Ö")
    @DeleteMapping("/passengers/{id}")
    public ResponseEntity<Void> deletePassengerCount(
            @Parameter(description = "ID –∑–∞–ø–∏—Å–∏", required = true)
            @PathVariable Long id) {
        
        PassengerCount existing = passengerCountService.getById(id);
        if (existing == null) {
            throw new ResourceNotFoundException("–ó–∞–ø–∏—Å—å –æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞—Ö", id);
        }
        
        try {
            passengerCountService.deleteById(id);
            return ResponseEntity.noContent().build();
        } catch (Exception e) {
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: " + e.getMessage());
        }
    }

    /**
     * –ü–†–û–ì–ù–û–ó –ó–ê–ì–†–£–ñ–ï–ù–ù–û–°–¢–ò –î–õ–Ø –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –ú–ê–†–®–†–£–¢–ê –ò –í–†–ï–ú–ï–ù–ò
     */
    @Operation(summary = "–ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –º–∞—Ä—à—Ä—É—Ç–∞")
    @GetMapping("/predictors")
    public ResponseEntity<RoutePredictionDTO> getPrediction(
            @Parameter(description = "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–∞—Ä—à—Ä—É—Ç–∞", example = "7A", required = true)
            @RequestParam String route,
            
            @Parameter(description = "–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è", example = "2024-12-19T15:00:00", required = true)
            @RequestParam @DateTimeFormat(pattern = "yyyy-MM-dd'T'HH:mm:ss") LocalDateTime time,
            
            @Parameter(description = "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", example = "K")
            @RequestParam(required = false) String stop) {
        
        try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if (route == null || route.trim().isEmpty()) {
                throw new IllegalArgumentException("–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
            }
            
            if (time == null) {
                throw new IllegalArgumentException("–í—Ä–µ–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
            }
            
            if (time.isBefore(LocalDateTime.now().minusDays(1))) {
                throw new IllegalArgumentException("–í—Ä–µ–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º");
            }
            
            RoutePredictionDTO prediction = predictionService.getPredictionForRouteAndTime(route, time, stop);
            
            if (prediction == null) {
                throw new ResourceNotFoundException("–ú–∞—Ä—à—Ä—É—Ç", route);
            }
            
            return ResponseEntity.ok(prediction);
            
        } catch (IllegalArgumentException e) {
            throw new IllegalArgumentException("–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: " + e.getMessage());
        } catch (Exception e) {
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑–∞: " + e.getMessage());
        }
    }

    /**
     * –ü–†–û–ì–ù–û–ó –ó–ê–ì–†–£–ñ–ï–ù–ù–û–°–¢–ò –ù–ê –í–ï–°–¨ –î–ï–ù–¨ –ü–û –ú–ê–†–®–†–£–¢–£
     */
    @Operation(summary = "–ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å")
    @GetMapping("/predictors/daily")
    public ResponseEntity<List<RoutePredictionDTO>> getDailyPredictions(
            @Parameter(description = "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–∞—Ä—à—Ä—É—Ç–∞", example = "7A", required = true)
            @RequestParam String route) {
        
        try {
            if (route == null || route.trim().isEmpty()) {
                throw new IllegalArgumentException("–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
            }
            
            List<RoutePredictionDTO> predictions = predictionService.getDailyPredictions(route);
            
            if (predictions.isEmpty()) {
                throw new ResourceNotFoundException("–ú–∞—Ä—à—Ä—É—Ç", route);
            }
            
            return ResponseEntity.ok(predictions);
            
        } catch (IllegalArgumentException e) {
            throw new IllegalArgumentException("–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: " + e.getMessage());
        } catch (Exception e) {
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: " + e.getMessage());
        }
    }

    /**
     * –ü–û–õ–£–ß–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ü–û –û–°–¢–ê–ù–û–í–ö–ï
     */
    @Operation(summary = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–ø–æ—Ç–æ–∫–∞ –ø–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ")
    @GetMapping("/stops/{id}/stats")
    public ResponseEntity<?> getStopStatistics(
            @Parameter(description = "ID –æ—Å—Ç–∞–Ω–æ–≤–∫–∏", example = "1", required = true)
            @PathVariable Long id) {
        
        try {
            List<PassengerCount> stopData = passengerCountService.getByStopId(id);
            
            if (stopData.isEmpty()) {
                throw new ResourceNotFoundException("–û—Å—Ç–∞–Ω–æ–≤–∫–∞", id);
            }
            
            int totalEntered = stopData.stream().mapToInt(PassengerCount::getEntered).sum();
            int totalExited = stopData.stream().mapToInt(PassengerCount::getExited).sum();
            
            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            StopStatistics stats = new StopStatistics(id, totalEntered, totalExited, totalEntered - totalExited);
            
            return ResponseEntity.ok(stats);
            
        } catch (ResourceNotFoundException e) {
            throw e; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ GlobalExceptionHandler
        } catch (Exception e) {
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: " + e.getMessage());
        }
    }

    /**
     * DTO –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò –û–°–¢–ê–ù–û–í–ö–ò
     */
    public static class StopStatistics {
        private final Long stopId;
        private final int totalEntered;
        private final int totalExited;
        private final int netPassengers;

        public StopStatistics(Long stopId, int totalEntered, int totalExited, int netPassengers) {
            this.stopId = stopId;
            this.totalEntered = totalEntered;
            this.totalExited = totalExited;
            this.netPassengers = netPassengers;
        }

        // –ì–µ—Ç—Ç–µ—Ä—ã
        public Long getStopId() { return stopId; }
        public int getTotalEntered() { return totalEntered; }
        public int getTotalExited() { return totalExited; }
        public int getNetPassengers() { return netPassengers; }
    }
}